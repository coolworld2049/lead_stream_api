datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-py"
  enable_experimental_decimal = true
  recursive_type_depth = 5
}

// Enum for Lead Type
enum LeadType {
  lead @map("lead")
}

// Enum for Product Type
enum ProductType {
  CREDIT_TRAFFIC @map("1")
  BANKRUPTCY @map("2")
}

// Enum for Gender
enum Gender {
  F @map("f")
  M @map("m")
}

// Enum for Meta SubTypes
enum MetaSubType {
  SUB1 @map("sub1")
  SUB2 @map("sub2")
  SUB3 @map("sub3")
  SUB4 @map("sub4")
  SUB5 @map("sub5")
}

// Enum for Address Types
enum AddressType {
  A_O @map("АО")
  A_OBL @map("Аобл")
  KRAI @map("край")
  OBL @map("обл")
  RISP @map("респ")
  O @map("округ")
  A_OBL_ @map("а.обл.")
  A_OKR_ @map("а.окр.")
  R @map("р-н")
  U @map("у")
  TER @map("тер")
  P @map("п")
  G @map("г")
  VNT @map("вн.тер. г.")
  POS @map("пос.")
}

// Enum for City Types
enum CityType {
  G @map("г")
  PG @map("пгт")
  RP @map("рп")
  KP @map("кп")
  DP @map("дп")
  SS @map("с/с")
  SA @map("с/а")
  SO @map("с/о")
  PO @map("п/о")
  TER @map("тер")
  SP @map("с/п")
  SMO @map("с/мо")
  MASSIV @map("массив")
}

// Enum for Settlement Types
enum SettlementType {
  TER_DNT @map("тер. ДНТ")
  J_D_ST @map("ж/д ст")
  P @map("п")
  S @map("с")
  J_R @map("ж/р")
  D @map("д")
  TER_ONO @map("тер. ОНО")
  PO @map("п/о")
  SNT @map("снт")
  M @map("м")
  AUL @map("аул")
  P_ST @map("п. ст.")
  P_ST_P @map("п/ст")
  P_J_D_ST @map("п. ж/д ст.")
}

// Enum for Street Types
enum StreetType {
  B_R @map("б-р")
  VYZD @map("въезд")
  DOR @map("дор")
  ZH_T @map("жт")
  ZAYEZD @map("заезд")
  KV_L @map("кв-л")
  KM @map("км")
  KOL_TSO @map("кольцо")
  LIN @map("линия")
  NAB @map("наб")
  OSTROV @map("остров")
  PARK @map("парк")
  PER @map("пер")
  PEREEZD @map("переезд")
  PL @map("пл")
}

// Enum for Address Equality
enum AddressEquality {
  TRUE @map("true")
  FALSE @map("false")
}

model Lead {
  id                Int               @id @default(autoincrement())
  type              LeadType          @map("lead") // Type of lead
  apiToken          String            @db.VarChar(64) // Authentication token
  product           ProductType       @map("1") // Traffic type (1 - Credit Traffic, 2 - Bankruptcy)
  appliedAt         DateTime          // Date of application
  stream            String            @db.VarChar(64) // Stream identifier

  meta              Meta              @relation(fields: [metaId], references: [id])
  metaId            Int               @unique

  sales             Sale[]
  user              User              @relation(fields: [userId], references: [id])
  userId            Int

  addressReg        Address          @relation("AddressReg", fields: [addressRegId], references: [id])
  addressRegId      Int

  addressFact       Address          @relation("AddressFact", fields: [addressFactId], references: [id])
  addressFactId     Int

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Meta {
  id               Int    @id @default(autoincrement())
  isTest           Boolean @default(false)
  sub1             String? @db.VarChar(64) @map("sub1")
  sub2             String? @db.VarChar(64) @map("sub2")
  sub3             String? @db.VarChar(64) @map("sub3")
  sub4             String? @db.VarChar(64) @map("sub4")
  sub5             String? @db.VarChar(64) @map("sub5")

  lead             Lead?  @relation
}

model Sale {
  id              Int     @id @default(autoincrement())
  campaignID      String  @db.Uuid // UUID format
  lead            Lead    @relation(fields: [leadId], references: [id])
  leadId          Int
}

model User {
  id              Int    @id @default(autoincrement())
  firstName       String @db.VarChar(50)
  fatherName      String @db.VarChar(50)
  lastName        String @db.VarChar(50)
  birthDate       DateTime
  birthPlace      String @db.VarChar(500)
  gender          Gender @map("f") // f, m
  phone           String @db.Char(11)
  email           String @db.VarChar(255)
  ip              String @db.VarChar(45) // IPv4 or IPv6

  consent         Consent?
  mailingConsent MailingConsent?
  codes           IdentificationCodes?
  leads           Lead[]
}

model Consent {
  id         Int      @id @default(autoincrement())
  status     Boolean
  datetime   DateTime
  user       User    @relation(fields: [userId], references: [id])
  userId     Int     @unique
}

model MailingConsent {
  id         Int      @id @default(autoincrement())
  status     Boolean
  datetime   DateTime
  user       User    @relation(fields: [userId], references: [id])
  userId     Int     @unique
}

model IdentificationCodes {
  id        Int    @id @default(autoincrement())
  snils     String @db.VarChar(12)
  inn       String @db.VarChar(12)
  passport  Passport? @relation(fields: [passportId], references: [id])
  passportId Int? @unique

  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @unique
}

model Passport {
  id              Int    @id @default(autoincrement())
  seria           String @db.Char(4)
  number          String @db.Char(6)
  issuer          String @db.VarChar(255)
  issuerCode      String @db.VarChar(20)
  issueDate       DateTime

  identificationCodes IdentificationCodes? @relation
}

model Address {
  id              Int    @id @default(autoincrement())
  address         String @db.VarChar(500)
  equalToFact     Boolean
  country         String @db.VarChar(60) @default("Россия")
  countryIso      String @db.Char(2) @default("RU")
  postalCode      String @db.VarChar(6)
  region          String @db.VarChar(60)
  regionType      AddressType
  regionFiasId    String @db.Uuid
  regionKladrCode String @db.Char(13)
  regionArea      String @db.VarChar(60)
  regionAreaType  String @db.VarChar(60)
  regionAreaFiasId String @db.Uuid
  regionAreaKladrCode String @db.Char(13)
  city            String @db.VarChar(60)
  cityType        CityType
  cityFiasId      String @db.Uuid
  cityKladrCode   String @db.Char(13)
  settlement      String @db.VarChar(60)
  settlementType  SettlementType
  settlementFiasId String @db.Uuid
  settlementKladrCode String @db.Char(13)
  street          String @db.VarChar(100)
  streetType      StreetType
  streetFiasId    String @db.Uuid
  streetKladrCode String @db.Char(13)
  house           String @db.VarChar(10)
  building        String @db.VarChar(10)
  block           String @db.VarChar(10)
  flat            String @db.VarChar(10)
  flatType        String @db.VarChar(20)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  leadsReg       Lead[] @relation("AddressReg")
  leadsFact      Lead[] @relation("AddressFact")
}
